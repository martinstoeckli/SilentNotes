@attribute [Route(RouteNames.RecycleBin)]
@inherits PageBase

@using System.ComponentModel;
@using SilentNotes.Models
@using SilentNotes.ViewModels
@using SilentNotes.Services

@inject ILanguageService LanguageService
@inject ISvgIconService IconService
@inject IRepositoryStorageService RepositoryStorageService
@inject ISettingsService SettingsService
@inject IThemeService ThemeService
@inject IFeedbackService FeedbackService
@inject IJSRuntime JSRuntime
@inject INavigationService Navigation
@inject ISafeKeyService SafeKeyService
@inject ICryptoRandomService CryptoRandomSource
@inject IMessengerService MessengerService

<style type="text/css">
	.mud-main-content {
		@(ThemeService.CssNoteRepositoryBackground)
		background-attachment: fixed;
		-webkit-filter: grayscale(0.8);
		filter: grayscale(0.8);
	}

	.note-item, .note-card, .note-locked {
		min-height: @(SettingsViewModel.ReferenceNoteMinSize)px;
		max-height: @(SettingsViewModel.ReferenceNoteMaxSize)px;
	}
	.note-viewer {
		font-size: @(ViewModel.GetNoteBaseFontSize(SettingsService, true))px !important;
		font-family: @(ViewModel.GetNoteFontFamily(SettingsService));
	}
	.note-handle-large {
		width: 38px;
		height: 38px;
		border-radius: 50%;
	}

	.note-light .note-viewer.over-view.checklist p::before { content: @(IconService.LoadIconAsCssUrl(IconNames.CheckboxBlankOutline, new[] { new KeyValuePair<string, string>("fill", "#000000") })) }
	.note-light .note-viewer.over-view.checklist p.done::before { content: @(IconService.LoadIconAsCssUrl(IconNames.CheckboxOutline, new[] { new KeyValuePair<string, string>("fill", "#000000") })) }
	.note-light .note-viewer.over-view.checklist p.disabled::before { content: @(IconService.LoadIconAsCssUrl(IconNames.CheckboxBlankOutline, new[] { new KeyValuePair<string, string>("fill", "#000000") })) }
	.note-dark .note-viewer.over-view.checklist p::before { content: @(IconService.LoadIconAsCssUrl(IconNames.CheckboxBlankOutline, new[] { new KeyValuePair<string, string>("fill", "#FFFFFF") })) }
	.note-dark .note-viewer.over-view.checklist p.done::before { content: @(IconService.LoadIconAsCssUrl(IconNames.CheckboxOutline, new[] { new KeyValuePair<string, string>("fill", "#FFFFFF") })) }
	.note-dark .note-viewer.over-view.checklist p.disabled::before { content: @(IconService.LoadIconAsCssUrl(IconNames.CheckboxBlankOutline, new[] { new KeyValuePair<string, string>("fill", "#FFFFFF") })) }
</style>

@* Main menu *@
<MudAppBar Class="flex-none" Fixed="true" Dense="true" WrapContent="false">
	<MudIconButton OnClick="@(() => Navigation.NavigateTo(BackRoute))" Icon="@IconService[IconNames.ArrowLeft]" Color="Color.Inherit" Class="mr-5" title="@LanguageService["back"]" Edge="Edge.Start" />

	<MudSpacer />

	<MudIconButton OnClick="@(() => ViewModel.EmptyRecycleBinCommand.Execute(null))" Icon="@IconService[IconNames.DeleteForever]" Color="Color.Inherit" title="@LanguageService["empty_recyclebin"]" />
</MudAppBar>

@* body *@
<MudMainContent>
	<div id="content" class="px-1 py-2">
		<ul id="recycled-notes" class="note-list flex-column flex-sm-row">
			@foreach (var note in ViewModel.RecycledNotes)
			{
				<li @key="note.Id" class="note-item">
					<div class="note-card mud-elevation-3">
						@if (@note.IsLocked)
						{
							<div class="note-locked">@IconService.EmbedSvgLink(IconNames.LockOutline)</div>
						}
						else
						{
							@* prevent drag start with onmousedown:preventDefault *@
							<div class="note-viewer over-view @note.CssClassNoteType" @onmousedown:preventDefault="true">@((MarkupString)note.GetShortenedUnlockedHtmlContent())</div>
						}

						<div class="note-handle note-handle-top reddish" @onclick="@(() => ViewModel.DeleteNotePermanentlyCommand.Execute(note.Id))" title="@LanguageService["note_delete_permanent"]">
							@IconService.EmbedSvgLink(IconNames.CloseThick, 19)
						</div>
						<div class="note-handle note-handle-bottom note-handle-large greenish" @onclick="@(() => ViewModel.RestoreNoteCommand.Execute(note.Id))" title="@LanguageService["note_undelete"]">
							@IconService.EmbedSvgLink(IconNames.DeleteRestore, 30)
						</div>
					</div>
				</li>
			}
		</ul>
	</div>
</MudMainContent>

@* Declare icons which can be reused multiple times, to reduce page size *@
<div hidden>
	@IconService.EmbedLinkableSvgs( new [] {
		IconNames.LockOutline,
		IconNames.CloseThick,
		IconNames.DeleteForever,
		IconNames.DeleteRestore,
	});
</div>

@code {
	protected override void OnInitialized()
	{
		RepositoryStorageService.LoadRepositoryOrDefault(out NoteRepositoryModel noteRepositoryModel);
		ViewModel = new RecycleBinViewModel(
			noteRepositoryModel, LanguageService, ThemeService, FeedbackService, SettingsService, SafeKeyService, CryptoRandomSource, RepositoryStorageService, MessengerService);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await KeyboardShortcuts.InitializeAsync(JSRuntime);
			KeyboardShortcuts.AddShortcut(new SnKeyboardShortcut(SnKey.Escape), () => Navigation.NavigateTo(BackRoute));
		}
	}

	protected override void OnStoringUnsavedData(StoreUnsavedDataMessage message)
	{
		base.OnStoringUnsavedData(message);
		ViewModel.OnStoringUnsavedData();
	}

	/// <inheritdoc/>
	protected override void OnAfterResume(DateTime lastPauseTime, bool safesClosed)
	{
		base.OnAfterResume(lastPauseTime, safesClosed);
		bool reload = safesClosed;
		if (!reload)
		{
			RepositoryStorageLoadResult loadResult = RepositoryStorageService.LoadRepositoryOrDefault(out NoteRepositoryModel newRepositoryModel);
			reload = !object.ReferenceEquals(ViewModel.Model, newRepositoryModel);
			if (!reload)
			{
				long oldFingerprint = ViewModel.Model.GetModificationFingerprint();
				long newFingerprint = newRepositoryModel.GetModificationFingerprint();
				reload = oldFingerprint != newFingerprint;
			}
		}

		if (reload)
			Navigation.NavigateReload();
	}

	private RecycleBinViewModel ViewModel { get; set; }
}