@attribute [Route(RouteNames.ChangePassword)]
@inherits PageBase

@using System.ComponentModel;
@using System.Security
@using SilentNotes.Models
@using SilentNotes.ViewModels
@using SilentNotes.Views
@using SilentNotes.Services

@inject ILanguageService LanguageService
@inject ISvgIconService IconService
@inject ISettingsService SettingsService
@inject IFeedbackService FeedbackService
@inject ICryptoRandomService RandomService
@inject IRepositoryStorageService RepositoryService
@inject IJSRuntime JSRuntime
@inject INavigationService Navigation

<style type="text/css">
</style>

@* Main menu *@
<MudAppBar Class="flex-none" Fixed="true" Dense="true" WrapContent="false">
	<MudIconButton OnClick="@(() => Navigation.NavigateTo(BackRoute))" Icon="@IconService[IconNames.ArrowLeft]" Color="Color.Inherit" Class="mr-5" title="@LanguageService["back"]" Edge="Edge.Start" />
</MudAppBar>

@* watermark image *@
<MudIcon Class="background-icon" Icon="@IconService[IconNames.SafeSquareOutline]" Style="@($"right:-110px; top:-160px;")" />

@* body *@
<MudMainContent>
	<MudContainer Class="ms-0" MaxWidth="MaxWidth.Medium">
		<div id="content" class="py-3">
			<h1 class="h-colored mb-6">@LanguageService["safe_change_password"]</h1>

			<MudForm>
				<MudTextFieldEx T="SecureString" @bind-Value="ViewModel.OldPassword"
					AutoFocus="true"
					Label="@LanguageService["safe_old_password"]"
					Converter="@_secureStringConverter"
					Variant="Variant.Outlined" InputType="@PasswordInputType"
					Error="@ViewModel.HasOldPasswordError"
					ErrorText="@LanguageService["password_wrong_error"]"
					Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="@(() => IsPasswordVisible = !IsPasswordVisible)" />

				<MudTextFieldEx T="SecureString" @bind-Value="ViewModel.Password"
					Label="@LanguageService["cloud_password"]"
					Converter="@_secureStringConverter"
					Variant="Variant.Outlined" InputType="@PasswordInputType"
					Error="@ViewModel.HasPasswordError"
					ErrorText="@LanguageService["password_short_error"]"
					Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="@(() => IsPasswordVisible = !IsPasswordVisible)" />

				<MudTextFieldEx @bind-Value="ViewModel.PasswordConfirmation"
					Label="@LanguageService["safe_confirm_password"]"
					Converter="@_secureStringConverter"
					Variant="Variant.Outlined" InputType="@PasswordInputType"
					Error="@ViewModel.HasPasswordConfirmationError"
					ErrorText="@LanguageService["password_confirmation_error"]" />
			</MudForm>

			<MudStack Class="my-4" Row="true" Justify="Justify.FlexEnd" Spacing="1">
				<MudButton OnClick="@(() => Navigation.NavigateTo(BackRoute))" Color="Color.Default" Variant="Variant.Filled">@LanguageService["cancel"]</MudButton>
				<MudButton @ref="_okButton" OnClick="@(() => ViewModel.OkCommand.Execute(null))" Color="Color.Primary" Variant="Variant.Filled">@LanguageService["ok"]</MudButton>
			</MudStack>

			<MudAlert Class="my-4" Severity="Severity.Info" Elevation="1">@LanguageService["safe_password_requirement"]</MudAlert>
		</div>
	</MudContainer>
</MudMainContent>

@* Declare icons which can be reused multiple times, to reduce page size *@
<div hidden>
	@IconService.EmbedLinkableSvgs( new [] {
	IconNames.SafeSquareOutline,
	});
</div>

@code {
	private MudBaseButton _okButton;
	private SecureStringConverter _secureStringConverter;

	protected override void OnInitialized()
	{
		base.OnParametersSet();
		IsPasswordVisible = false;
		ViewModel = new ChangePasswordViewModel(Navigation, RandomService, SettingsService, RepositoryService);
		_secureStringConverter = new SecureStringConverter();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await KeyboardShortcuts.InitializeAsync(JSRuntime);
			KeyboardShortcuts
				.AddShortcut(new SnKeyboardShortcut(SnKey.Escape), () => Navigation.NavigateTo(BackRoute))
				.AddShortcut(new SnKeyboardShortcut(SnKey.Enter), async () => await SnKeyboardShortcuts.SimulateClickAsync(_okButton));
		}
	}

	private ChangePasswordViewModel ViewModel { get; set; }

	protected override void OnStoringUnsavedData(StoreUnsavedDataMessage message)
	{
		base.OnStoringUnsavedData(message);
		ViewModel.OnStoringUnsavedData();
	}

	/// <summary>
	/// Gets or sets a value indicating whether the plaintext of the password is shown.
	/// </summary>
	private bool IsPasswordVisible { get; set; }

	/// <summary>
	/// Gets the type for the password input field (dots/plaintext).
	/// </summary>
	private InputType PasswordInputType
	{
		get { return IsPasswordVisible ? InputType.Text : InputType.Password; }
	}

	/// <summary>
	/// Gets the "password visible" icon for the password input field.
	/// </summary>
	private string PasswordInputIcon
	{
		get { return IsPasswordVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff; }
	}
}