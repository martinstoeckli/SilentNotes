@inherits LayoutComponentBase

@using SilentNotes.ViewModels
@using SilentNotes.Services

@inject IThemeService ThemeService
@inject INavigationService NavigationService
@inject IFeedbackService FeedbackService
@inject INotificationService NotificationService
@inject IVersionService VersionService
@inject IClipboardService ClipboardService
@inject IRepositoryStorageService RepositoryStorageService
@inject IFolderPickerService FolderPickerService
@inject IMessengerService MessengerService
@inject ISynchronizationService SynchronizationService

@implements IDisposable

<style type="text/css">
	@ThemeService.CssTheme

	table.error {
		border-collapse: collapse;
		table-layout:fixed;
	}
	table.error td, table.error th {
		border-top: 1px solid;
		border-bottom: 1px solid;
		padding: 6px;
		word-wrap: break-word;
	}
	.error-button {
		padding: 4px;
		color: var(--mud-palette-primary-text);
		background-color: var(--mud-palette-primary);
	}
</style>

<MudThemeProvider @bind-IsDarkMode="ThemeService.IsDarkMode" Theme="@ThemeService.Theme" />
<MudPopoverProvider />
<MudDialogProvider BackdropClick="true" CloseOnEscapeKey="true"/>
<MudSnackbarProvider />

<ErrorBoundary Context="exception">
<ChildContent>
	<MudLayout Class="@ThemeService.LightOrDarkClass">
		@Body
	</MudLayout>

@if(FeedbackService.IsBusyIndicatorVisible)
{
	<MudProgressCircular id="progress" Indeterminate="true" Color="Color.Tertiary" Size="Size.Large" />
}
</ChildContent>
<ErrorContent>
	<div class="pa-6" style="max-width:640px">
		<h1 class="h-colored mb-3">Sorry</h1>
		<p>An unexpected error has occured.</p>
		<table class="error my-3" style="width:100%">
			<tbody>
			<tr>
				<th style="width:auto">SilentNotes version</th>
				<td style="width:auto">@VersionService.GetApplicationVersion()</td>
				<td style="width:60px"></td>
			</tr>
			<tr>
				<th style="width:auto">Error message</th>
				<td style="width:auto">@GetExceptionMessages(exception)</td>
				<td style="width:60px"><button type="button" class="error-button" @onclick="() => ClipboardService.SetTextAsync(GetExceptionMessages(exception))">Copy</button></td>
			</tr>
			<tr>
				<th style="width:auto">Stack trace</th>
				<td style="width:auto"><div style="max-height:5em; overflow:auto">@GetExceptionStacktrace(exception)</div></td>
				<td style="width:60px"><button type="button" class="error-button" @onclick="() => ClipboardService.SetTextAsync(GetExceptionStacktrace(exception))">Copy</button></td>
			</tr>
			</tbody>
		</table>
		<button type="button" class="error-button" @onclick="() => CreateBackup()">Create backup</button>
	</div>
</ErrorContent>
</ErrorBoundary>

@code {
	protected override void OnInitialized()
	{
		// Give other services a way to redraw the GUI of the whole app.
		MessengerService.Register<RedrawMainPageMessage>(
			this, (recipient, message) => InvokeAsync(StateHasChanged));

		// todo: stom
		// Workaround: Scoped services are always correct when injected, but when adding them to
		// Ioc as scoped services, it seems they get lost, and when demanded the next time the Ioc
		// creates a new different service. Therefore we register them as we got them from injection.
		Ioc.Instance
			.ClearInjected()
			.AddInjected<INavigationService>(NavigationService)
			.AddInjected<IFeedbackService>(FeedbackService)
			.AddInjected<INotificationService>(NotificationService);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			MessengerService.Send(new MainLayoutReadyMessage());

			await NotificationService.ShowNextNotification();

			// Do not await the synchronization, so it runs in the background.
			_ = SynchronizationService.AutoSynchronizeAtStartup(Ioc.Instance);
		}
	}

	/// <summary>
	/// Allows to create a backup, part of the error page
	/// </summary>
	private void CreateBackup()
	{
		InfoViewModel infoViewModel = new InfoViewModel(null, null, RepositoryStorageService, FolderPickerService, null, FeedbackService);
		infoViewModel.BackupRepositoryCommand.Execute(this);
	}

	private static IEnumerable<Exception> EnumerateAggregateExceptions(Exception ex)
	{
		if (ex is AggregateException aggregateEx)
			return aggregateEx.InnerExceptions;
		else
			return new Exception[] { ex };
	}

	private string GetExceptionMessages(Exception ex)
	{
		return string.Join("\n", EnumerateAggregateExceptions(ex).Select(ex => ex.Message));
	}

	private string GetExceptionStacktrace(Exception ex)
	{
		return string.Join("\n", EnumerateAggregateExceptions(ex).Select(ex => ex.StackTrace));
	}

	/// <inheritdoc/>
	public void Dispose()
	{
		MessengerService.Unregister<RedrawMainPageMessage>(this);
	}
}
