@attribute [Route("/")]
@attribute [Route(RouteNames.NoteRepository)]
@attribute [Route(RouteNames.NoteRepository + "/bringtoview/{BringToViewNoteId}")]
@inherits PageBase

@using System.ComponentModel
@using System.Windows.Input;
@using CommunityToolkit.Mvvm.Messaging
@using MudBlazor.Services;
@using SilentNotes.Models
@using SilentNotes.ViewModels
@using SilentNotes.Services

@inject ILanguageService LanguageService
@inject ISvgIconService IconService
@inject IJSRuntime JSRuntime
@inject INavigationService Navigation
@inject IFeedbackService FeedbackService
@inject ISettingsService SettingsService
@inject IThemeService ThemeService
@inject IRepositoryStorageService RepositoryStorageService
@inject IEnvironmentService EnvironmentService
@inject ICryptoRandomService CryptoRandomSource
@inject IScrollManager ScrollManager
@inject IBrowserViewportService ViewportService
@inject ISynchronizationService SynchronizationService

<style type="text/css">
	.mud-main-content {
		@(ThemeService.CssNoteRepositoryBackground)
		background-attachment: fixed;
	}
	.note-item, .note-card, .note-locked {
		min-height: @(ViewModel.NoteMinHeight)px;
		max-height: @(ViewModel.NoteMaxHeight)px;
	}
	.note-viewer {
		font-size: @(ViewModel.GetNoteBaseFontSize(SettingsService, true))px !important;
	}
	.filter-input .mud-svg-icon {
		fill: var(--mud-palette-appbar-background);
	}
	.note-light .note-viewer.over-view.checklist p::before { content: @(IconService.LoadIconAsCssUrl(IconNames.CheckboxBlankOutline, new[] { new KeyValuePair<string, string>("fill", "#000000") })) }
	.note-light .note-viewer.over-view.checklist p.done::before { content: @(IconService.LoadIconAsCssUrl(IconNames.CheckboxOutline, new[] { new KeyValuePair<string, string>("fill", "#000000") })) }
	.note-light .note-viewer.over-view.checklist p.disabled::before { content: @(IconService.LoadIconAsCssUrl(IconNames.CheckboxBlankOutline, new[] { new KeyValuePair<string, string>("fill", "#000000") })) }
	.note-dark .note-viewer.over-view.checklist p::before { content: @(IconService.LoadIconAsCssUrl(IconNames.CheckboxBlankOutline, new[] { new KeyValuePair<string, string>("fill", "#FFFFFF") })) }
	.note-dark .note-viewer.over-view.checklist p.done::before { content: @(IconService.LoadIconAsCssUrl(IconNames.CheckboxOutline, new[] { new KeyValuePair<string, string>("fill", "#FFFFFF") })) }
	.note-dark .note-viewer.over-view.checklist p.disabled::before { content: @(IconService.LoadIconAsCssUrl(IconNames.CheckboxBlankOutline, new[] { new KeyValuePair<string, string>("fill", "#FFFFFF") })) }
</style>

@* Main menu *@
<MudAppBar Class="flex-none" Fixed="true" Dense="true" WrapContent="false">
	<MudSpacer />

	@* Tags *@
	<MudIconButton @ref="_tagsButton" OnClick="@(() => ViewModel.IsDrawerOpen = !ViewModel.IsDrawerOpen)"
		Class="@Css.BuildClass(new CssClassIf("btn-toggled", ViewModel.IsFilteredByTag))"
		Icon="@(IconService.GetSvgLink(IconNames.TagMultiple))" Color="Color.Inherit"
		Title="@GetTagsTooltip()" />

	@* Filter *@
	<MudPaper Class="d-inline-flex align-center rounded-pill pa-0" Style="background-color: var(--mud-palette-appbar-text)" MaxWidth="55%" MaxHeight="36px" Elevation="0">
		<MudInput @ref="_filterInput" @bind-Value="ViewModel.Filter"
			Class="filter-input ml-2 mr-1 my-0"
			Style="color: #000000"
			AutoFocus="@ShouldAutofocusToFilter"
			Adornment="@(ViewModel.IsFiltered ? Adornment.None : Adornment.End)" AdornmentIcon="@IconService.GetSvgLink(IconNames.Magnify)"
			Immediate="true" Clearable="true" />
	</MudPaper>

	@* Synchronization *@
	<MudIconButton @ref="_syncButton" OnClick="@(() => ViewModel.SynchronizeCommand.Execute(null))" Icon="@IconService[IconNames.CloudSync]" Color="Color.Inherit" Title="@LanguageService["sync_notes"]" Edge="Edge.End" />

	@* Overflow menu *@
	<MudMenu @ref="_overflowMenu" Dense="true" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
		<ActivatorContent>
			<MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
		</ActivatorContent>
		<ChildContent><span class="menu-font">
			<MudMenuItem OnClick="@(() => ViewModel.NewNoteCommand.Execute(null))" Icon="@IconService.GetSvgLink(IconNames.NoteTextOutline)">@LanguageService["note_create_new"]</MudMenuItem>
			<MudMenuItem OnClick="@(() => ViewModel.NewChecklistCommand.Execute(null))" Icon="@IconService.GetSvgLink(IconNames.OrderBoolAscendingVariant)">@LanguageService["checklist_create_new"]</MudMenuItem>
			<MudMenuItem OnClick="@(() => Navigation.NavigateTo(RouteNames.RecycleBin))" Icon="@IconService[IconNames.DeleteEmpty]">@LanguageService["show_recyclebin"]</MudMenuItem>
			<MudMenuItem OnClick="@(() => Navigation.NavigateTo(RouteNames.Export))" Icon="@IconService[IconNames.Export]">@LanguageService["show_export"]</MudMenuItem>

			<MudDivider />

			@if (ViewModel.IsAnySafeOpen)
			{
				<MudMenuItem OnClick="@(() => ViewModel.CloseSafeCommand.Execute(null))" Icon="@IconService.GetSvgLink(IconNames.SafeSquareOutline)">@LanguageService["safe_close"]</MudMenuItem>
			}
			else
			{
				<MudMenuItem OnClick="@(() => Navigation.NavigateTo(RouteNames.OpenSafe))" Icon="@IconService.GetSvgLink(IconNames.SafeSquareOutline)">@LanguageService["safe_open"]</MudMenuItem>
			}
			<MudMenuItem OnClick="@(() => Navigation.NavigateTo(RouteNames.ChangePassword))" Icon="@IconService[IconNames.LockReset]" Disabled="!ViewModel.SafeExists">@LanguageService["safe_change_password"]</MudMenuItem>

			<MudDivider />

			<MudMenuItem OnClick="@(() => Navigation.NavigateTo(RouteNames.TransferCodeHistory))" Icon="@IconService[IconNames.Key]">@LanguageService["show_transfer_code"]</MudMenuItem>
			<MudMenuItem OnClick="@(() => Navigation.NavigateTo(RouteNames.Settings))" Icon="@IconService[IconNames.Settings]">@LanguageService["show_settings"]</MudMenuItem>
			<MudMenuItem OnClick="@(() => Navigation.NavigateTo(RouteNames.Info))" ForceLoad="false" Icon="@Icons.Material.Filled.Info">@LanguageService["show_info"]</MudMenuItem>
		</span></ChildContent>
	</MudMenu>
</MudAppBar>

@* Sidebar with tags *@
<MudSwipeArea OnSwipeEnd="OnSwipeDrawer">
	<MudDrawer @ref="_sideDrawer" @bind-Open="@ViewModel.IsDrawerOpen" Elevation="1" Variant="DrawerVariant.Responsive" Breakpoint="Breakpoint.Sm" ClipMode="DrawerClipMode.Docked">
		<MudDrawerHeader Class="d-inline-flex justify-space-between align-start pb-2">
			<MudStack Row="false" Spacing="1">
				<h3 class="h-colored">@LanguageService["filter_tags"]</h3>
				<MudStack Row="true" AlignItems="AlignItems.Center">
					<MudButton
						OnClick="@(() => ViewModel.ClearTagFilterCommand.Execute(null))"
						Title="@LanguageService["filter_show_all_notes"]"
						Size="Size.Medium" Color="Color.Primary" Variant="Variant.Filled">
						@LanguageService["reset"]
					</MudButton>
					<MudIconButton
						OnClick="@(() => ViewModel.ToggleNotesWithoutTagsFilterCommand.Execute(null))"
						Class="@Css.BuildClass(new CssClassIf("btn-toggled", ViewModel.FilterNotesWithoutTags), "ml-1")"
						Icon="@IconService.GetSvgLink(IconNames.TagOff)"
						Title="@LanguageService["filter_only_without_tags"]" />
				</MudStack>
			</MudStack>
			<MudIconButton OnClick="() => ViewModel.IsDrawerOpen = false" Icon="@IconService.GetSvgLink(IconNames.Close)" Size="Size.Small" />
		</MudDrawerHeader>
		<MudDivider Class="my-2" />
		<MudDrawerContainer Style="height: 100%; overflow: auto;">
@* todo:
			<MudTreeView id="tagTree"
				Items="ViewModel.TagsRootNode.Children"
				ServerData="TagTreeItemViewModel.LoadData"
				Color="Color.Tertiary">
				<ItemTemplate>
					<MudTreeViewItem @bind-Expanded="@context.IsExpanded"
						Items="@context.Children"
						Value="@context" Text="@context.Title"
						OnClick="@(() => ViewModel.SelectTagNodeCommand.Execute(context))"
						CanExpand="@context.CanExpand"
						Activated="@context.IsSelected"
						Icon="@GetTagIcon(context)" IconColor="@GetTagIconColor(context)">
						<BodyContent Context="bodyContext">
							<MudText Color="@GetTagIconColor(context)">@context.Title</MudText>
						</BodyContent>
					</MudTreeViewItem>
				</ItemTemplate>
			</MudTreeView>
			*@
		</MudDrawerContainer>
	</MudDrawer>
</MudSwipeArea>

@* body *@
<MudMainContent>
	<div id="content" class="px-1 py-2">
		<ul id="note-repository" class="note-list flex-column flex-sm-row">
			@foreach (var note in ViewModel.FilteredNotes)
			{
				<li @key="note.Id" class="note-item" data-note="@note.Id" @onclick="() => Navigation.NavigateTo(note.Route)">
					<div class="note-card mud-elevation-3 @note.LightOrDarkClass()" style="background-color:@note.BackgroundColorHex">
						@if (note.IsLocked)
						{
							<div class="note-locked">@IconService.EmbedSvgLink(IconNames.LockOutline)</div>
						}
						else
						{
							@* prevent drag start with onmousedown:preventDefault *@
							<div class="note-viewer over-view @note.CssClassNoteType" @onmousedown:preventDefault="true">@((MarkupString)note.GetShortenedUnlockedHtmlContent())</div>
						}

						@if (note.IsPinned)
						{
							<div class="pin">@IconService.EmbedSvgLink(IconNames.Pin, 22)</div>
						}
						<div class="note-handle note-handle-top @Css.BuildClass(new CssClassIf("bluish-highlighted", note == ViewModel.SelectedOrderNote))" @onmousedown="() => ViewModel.SelectOrderNote(note)" @onclick:stopPropagation="true">@IconService.EmbedSvgLink(IconNames.ArrowAll, 22)</div>
						<div class="note-handle note-handle-bottom" @onclick="() => ViewModel.DeleteNoteCommand.Execute(note.Id)" @onclick:stopPropagation="true">@IconService.EmbedSvgLink(IconNames.Delete, 19)</div>
						@if (ViewModel.IsAnySafeOpen && !note.IsLocked)
						{
							@if (note.IsInSafe)
							{
								<div class="note-handle note-handle-inset reddish" @onclick="() => ViewModel.RemoveNoteFromSafe(note.Id)" @onclick:stopPropagation="true">@IconService.EmbedSvgLink(IconNames.Lock, 18)</div>
							}
							else
							{
								<div class="note-handle note-handle-inset greenish" @onclick="() => ViewModel.AddNoteToSafe(note.Id)" @onclick:stopPropagation="true">@IconService.EmbedSvgLink(IconNames.LockOpenVariant, 18)</div>
							}
						}
					</div>
				</li>
			}
		</ul>
	</div>
</MudMainContent>

@* Note ordering toolbar *@
<MudPopover Open="@ViewModel.OrderToolbarVisible" Class="secondary-app-bar" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopRight">
	<MudIconButton OnClick="() => ViewModel.MoveSelectedOrderNote(true, false)" Icon="@IconService[IconNames.ArrowCollapseUp]" Color="Color.Inherit" Title="order" Edge="Edge.End" />
	<MudIconButton OnClick="() => ViewModel.MoveSelectedOrderNote(true, true)" Icon="@IconService[IconNames.ArrowUp]" Color="Color.Inherit" Title="order" Edge="Edge.End" />
	<MudIconButton OnClick="() => ViewModel.MoveSelectedOrderNote(false, true)" Icon="@IconService[IconNames.ArrowDown]" Color="Color.Inherit" Title="order" Edge="Edge.End" />
	<MudIconButton OnClick="() => ViewModel.MoveSelectedOrderNote(false, false)" Icon="@IconService[IconNames.ArrowCollapseDown]" Color="Color.Inherit" Title="order" Edge="Edge.False" />
	<MudIconButton OnClick="() => ViewModel.SelectOrderNote(null)" Icon="@IconService.GetSvgLink(IconNames.Close)" Color="Color.Inherit" Size="Size.Small" Edge="Edge.End" />
</MudPopover>

@* The FAB for adding a new note *@
<MudMenu @ref="_fabMenu" Class="fab-position" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.BottomRight">
	<ActivatorContent>
		<MudFab Class="mt-4" Color="Color.Primary" StartIcon="@IconService[IconNames.Plus]" />
	</ActivatorContent>
	<ChildContent>
		<MudNavLink OnClick="() => ViewModel.NewNoteCommand.Execute(null)" Icon="@IconService.GetSvgLink(IconNames.NoteTextOutline)">@LanguageService["note_create_new"]</MudNavLink>
		<MudNavLink OnClick="() => ViewModel.NewChecklistCommand.Execute(null)" Icon="@IconService.GetSvgLink(IconNames.OrderBoolAscendingVariant)">@LanguageService["checklist_create_new"]</MudNavLink>
	</ChildContent>
</MudMenu>

@* Declare icons which can be reused multiple times, to reduce page size *@
<div hidden>
	@IconService.EmbedLinkableSvgs( new [] {
		IconNames.ArrowAll,
		IconNames.Close,
		IconNames.Delete,
		IconNames.LockOutline,
		IconNames.Lock,
		IconNames.LockOpenVariant,
		IconNames.Magnify,
		IconNames.NoteTextOutline,
		IconNames.OrderBoolAscendingVariant,
		IconNames.Pin,
		IconNames.TagMultiple,
		IconNames.TagOff,
		IconNames.TagOutline,
		IconNames.TagPlusOutline,
		IconNames.SafeSquareOutline,
		IconNames.ArrowCollapseUp,
		IconNames.ArrowUp,
		IconNames.ArrowDown,
		IconNames.ArrowCollapseDown,
	});
</div>


@code {
	///////////////////////////////////////////////////////////////////////////////////////////////
	private MudInput<string> _filterInput;
	private MudMenu _overflowMenu;
	private MudMenu _fabMenu;
	private MudDrawer _sideDrawer;
	private MudIconButton _tagsButton;
	private MudBaseButton _syncButton;
	private BringNoteIntoViewMessage _pendingScrollIntoView;

	/// <summary>
	/// Initializes a new instance of the <see cref="NoteRepositoryPage"/> class.
	/// </summary>
	protected override async Task OnInitializedAsync()
	{
		BackRoute = null; // Close the application when navigating back
		RepositoryStorageLoadResult loadResult = RepositoryStorageService.LoadRepositoryOrDefault(out NoteRepositoryModel noteRepositoryModel);

		ViewModel = new NoteRepositoryViewModel(
			noteRepositoryModel,
			LanguageService,
			Navigation,
			FeedbackService,
			ThemeService,
			SettingsService,
			EnvironmentService,
			SynchronizationService,
			CryptoRandomSource,
			RepositoryStorageService
		);
		await ViewModel.InitializeTagTree();

		WeakReferenceMessenger.Default.Register<BringNoteIntoViewMessage>(
			this, (recipient, message) => _pendingScrollIntoView = message);

		if (loadResult == RepositoryStorageLoadResult.InvalidRepository)
			throw new Exception("Invalid repository");
	}

	/// <inheritdoc/>
	protected override void OnParametersSet()
	{
		if (!string.IsNullOrEmpty(BringToViewNoteId))
		{
			_pendingScrollIntoView = new BringNoteIntoViewMessage(Guid.Parse(BringToViewNoteId), false);
		}
	}

	/// <inheritdoc/>
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await KeyboardShortcuts.InitializeAsync(JSRuntime);
			KeyboardShortcuts
				.SetCloseMenuShortcut(new SnKeyboardShortcut(SnKey.Escape), OnCloseMenuOrDialog)
				.AddShortcut(new SnKeyboardShortcut("t", true), async () => await SnKeyboardShortcuts.SimulateClickAsync(_tagsButton))
				.AddShortcut(new SnKeyboardShortcut("s", true), async () => await SnKeyboardShortcuts.SimulateClickAsync(_syncButton))
				.AddShortcut(new SnKeyboardShortcut("n", true), () => ViewModel.NewNoteCommand.Execute(null))
				.AddShortcut(new SnKeyboardShortcut("l", true), () => ViewModel.NewChecklistCommand.Execute(null))
				.AddShortcut(new SnKeyboardShortcut("r", true), () => Navigation.NavigateTo(RouteNames.RecycleBin))
				.AddShortcut(new SnKeyboardShortcut("i", true), () => Navigation.NavigateTo(RouteNames.Info))
				.AddShortcut(new SnKeyboardShortcut(SnKey.Home, true), async () => await ScrollManager.ScrollToTopAsync("#content", ScrollBehavior.Auto))
				.AddShortcut(new SnKeyboardShortcut(SnKey.End, true), async () => await ScrollManager.ScrollToBottomAsync("#content", ScrollBehavior.Auto));
		}

		if (_pendingScrollIntoView != null)
		{
			await BringNoteIntoView(_pendingScrollIntoView);
			_pendingScrollIntoView = null;
		}
	}

	/// <inheritdoc/>
	protected override void OnStoringUnsavedData(StoreUnsavedDataMessage message)
	{
		base.OnStoringUnsavedData(message);
		ViewModel?.OnStoringUnsavedData();
	}

	/// <inheritdoc/>
	protected override void OnClosingPage()
	{
		base.OnClosingPage();
		WeakReferenceMessenger.Default.Unregister<BringNoteIntoViewMessage>(this);
		FeedbackService.SetBusyIndicatorVisible(false, false);
	}

	/// <summary>
	/// Gets or sets the datacontext of this view.
	/// </summary>
	private NoteRepositoryViewModel ViewModel { get; set; }

	/// <summary>
	/// Gets or sets the note id which was passed in the routing.
	/// </summary>
	[Parameter]
	public string BringToViewNoteId { get; set; } = default!;

	/// <inheritdoc/>
	protected override bool OnCloseMenuOrDialog()
	{
		base.OnCloseMenuOrDialog();
		bool result = false;

		if (_overflowMenu.Open)
		{
			// todo: test
			_ = _overflowMenu.CloseMenuAsync();
			result = true;
		}
		if (_fabMenu.Open)
		{
			// todo: test
			_ = _fabMenu.CloseMenuAsync();
			result = true;
		}

		// todo: nicht mehr nötig?
		// if (result)
		// 	StateHasChanged();
		return result;
	}

	/// <summary>
	/// Focus filter control for direct typing on Windows.
	/// On Android the focus will bring up the keyboard, which we want to avoid.
	/// </summary>
	private bool ShouldAutofocusToFilter
	{
		get { return EnvironmentService.Os == Services.OperatingSystem.Windows; }
	}

	private void OnSwipeDrawer(SwipeEventArgs args)
	{
		// Close drawer when swiping to the left
		if ((args.SwipeDirection == SwipeDirection.RightToLeft) && ViewModel.IsDrawerOpen)
			ViewModel.IsDrawerOpen = false;
	}

	private async Task BringNoteIntoView(BringNoteIntoViewMessage message)
	{
		string selector = string.Format("[data-note='{0}']", _pendingScrollIntoView.NoteId);
		var scrollBehavior = _pendingScrollIntoView.Smooth ? ScrollBehavior.Smooth : ScrollBehavior.Auto;
		await ScrollManager.ScrollIntoViewAsync(selector, scrollBehavior);
	}

	private string GetTagIcon(ITreeItemViewModel tagTreeNode)
	{
		return tagTreeNode.Parent == ViewModel.TagsRootNode
			? IconService.GetSvgLink(IconNames.TagOutline)
			: IconService.GetSvgLink(IconNames.TagPlusOutline, 22);
	}

	private Color GetTagIconColor(ITreeItemViewModel tagTreeNode)
	{
		return ((TagTreeItemViewModel)tagTreeNode).IsSelected
			? Color.Tertiary
			: Color.Default;
	}

	private string GetTagsTooltip()
	{
		if (ViewModel.FilterNotesWithoutTags)
			return LanguageService["filter_only_without_tags"];
		else
			return string.Join(", ", ViewModel.GetFilterTags());
	}
}
