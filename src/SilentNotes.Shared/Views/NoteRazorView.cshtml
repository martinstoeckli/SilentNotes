@using SilentNotes.ViewModels
@model NoteViewModel
<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <base href="@Model.HtmlBase">
    <title>SilentNotes</title>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no, user-scalable=no">

    <link href="bootstrap.min.css" rel="stylesheet" />
    <link href="silentnotes.css" rel="stylesheet" />
    <link href="quill/quill.snow.css" rel="stylesheet">
    <link href="NoteView.css" rel="stylesheet">

    <script src="jquery-3.3.1.min.js"></script>
    <script src="bootstrap.bundle.min.js"></script>
    <script src="silentnotes.js"></script>
    <script src="quill/quill.min.js"></script>

    <style type="text/css">
    </style>
    <script>
        var quill;

        function toggleFormat(formatName) {
            var selectionFormat = quill.getFormat();
            var selectionFormatValue = selectionFormat[formatName];
            selectionFormatValue = !selectionFormatValue;
            quill.format(formatName, selectionFormatValue, 'user');
        }

        function toggleBlockFormat(formatName, blockType) {
            var selectionFormat = quill.getFormat();
            var selectionFormatValue = selectionFormat[formatName];
            var newSelectionFormat; // undefined removes the block format
            if (selectionFormatValue !== blockType)
                newSelectionFormat = blockType;
            quill.format(formatName, newSelectionFormat, 'user');
        }

        function simulateArrowKey(key) {
            quill.focus();
            var range = quill.getSelection();
            if (range) {
                switch (key) {
                    case 37: // left
                        if (range.length <= 0)
                            quill.setSelection(range.index - 1, 0);
                        else
                            quill.setSelection(range.index, range.length - 1);
                        break;
                    case 39: // right
                        if (range.length <= 0)
                            quill.setSelection(range.index + 1, 0);
                        else
                            quill.setSelection(range.index, range.length + 1);
                        break;
                }
            }
        }

        function getNoteHtmlContent() {
            return quill.root.innerHTML;
        }

        $(function () {
            quill = new Quill('#myeditor', {
                formats: ['header', 'bold', 'italic', 'underline', 'strike', 'list', 'code', 'code-block', 'blockquote'],
                modules: {
                    toolbar: '#quill-toolbar',
                },
                theme: 'snow',
            });

            quill.on('text-change', function (delta, oldDelta, source) {
                if (source === 'user') {
                    var params = [];
                    params['event-type'] = 'text-change';
                    params['data-binding'] = 'quill';

                    var parts = [];
                    for (var key in params) {
                        var value = params[key];
                        if (value)
                            parts.push(key + '=' + encodeURIComponent(value));
                    }

                    var url = 'HtmlViewBinding?' + parts.join('&');
                    location.href = url;
                }
            });

            $(quill.root).one("focusin", function () {
                $('#arrowkeys').css("display", "inline-flex");
            });
        });
    </script>
</head>
<body>
    <nav id="navigation" class="d-flex">
        <button class="nav-item mr-auto" onclick="bind(event);" data-binding="GoBack" title="@Model.Language["back"]">@{WriteLiteral(Model.Icon["arrow-left"]);}</button>

        <span id="quill-toolbar" class="d-inline-flex">
            <select class="nav-item ql-header">
                <option value="1"></option>
                <option value="2"></option>
                <option value="3"></option>
                <option selected="selected"></option>
            </select>

            <button class="nav-item ql-bold" title="@Model.Language["note_bold"]"></button>
            <button class="nav-item ql-italic" title="@Model.Language["note_italic"]"></button>
            <span class="show-only-on-wide-browser">
                <button class="nav-item ql-underline" title="@Model.Language["note_underline"]"></button>
                <button class="nav-item ql-strike" title="@Model.Language["note_strike"]"></button>
                <button class="nav-item ql-list" value="ordered" title="@Model.Language["note_list_ordered"]"></button>
                <button class="nav-item ql-list" value="bullet" title="@Model.Language["note_list_unordered"]"></button>
            </span>
        </span>

        <!-- Color dropdown -->
        <div class="dropdown">
            <button class="nav-item" id="colorDropdownMenu" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" title="@Model.Language["note_colors"]">
                @{WriteLiteral(Model.Icon["palette"]);}
            </button>
            <div class="dropdown-menu dropdown-menu-right" aria-labelledby="colorDropdownMenu">
                @foreach (var color in @Model.BackgroundColorsHex)
                {
                    <div class="dropdown-item color-btn" onclick="bind(event);" data-binding="backgroundcolorhex" data-backgroundcolorhex="@color" style="background-color: @color">&nbsp;</div>
                }
            </div>
        </div>

        <!-- Dropdown Menu -->
        <div class="dropdown">
            <button class="nav-item" id="navOverflowMenu" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                @{WriteLiteral(Model.Icon["dots-vertical"]);}
            </button>
            <div class="dropdown-menu dropdown-menu-right" aria-labelledby="navOverflowMenu">
                <div class="dropdown-item show-only-on-narrow-browser" onclick="toggleFormat('underline');">@{WriteLiteral(Model.Icon["format-underline"]);} @Model.Language["note_underline"]</div>
                <div class="dropdown-item show-only-on-narrow-browser" onclick="toggleFormat('strike');">@{WriteLiteral(Model.Icon["format-strikethrough-variant"]);} @Model.Language["note_strike"]</div>
                <div class="dropdown-item show-only-on-narrow-browser" onclick="toggleBlockFormat('list', 'ordered');">@{WriteLiteral(Model.Icon["format-list-numbers"]);} @Model.Language["note_list_ordered"]</div>
                <div class="dropdown-item show-only-on-narrow-browser" onclick="toggleBlockFormat('list', 'bullet');">@{WriteLiteral(Model.Icon["format-list-bulleted"]);} @Model.Language["note_list_unordered"]</div>
                <div class="dropdown-item" onclick="toggleFormat('code-block');">@{WriteLiteral(Model.Icon["code-braces"]);} @Model.Language["note_code"]</div>
                <div class="dropdown-item" onclick="toggleFormat('blockquote');">@{WriteLiteral(Model.Icon["format-quote-close"]);} @Model.Language["note_quotation"]</div>
            </div>
        </div>
    </nav>

    <div id="content" class="" data-binding="Content" style="background-color: @Model.BackgroundColorHex">
        <div id="myeditor" class="note-viewer" data-binding="quill">@{WriteLiteral(Model.HtmlContent);}</div>
    </div>

    @if (Model.ShowCursorArrowKeys)
    {
    <div id="arrowkeys" title="@Model.Language["gui_arrow_key"]">
        <svg class="arrowkey" onmousedown="event.preventDefault();" onclick="simulateArrowKey(37);" viewBox='0 0 24 24'>@{WriteLiteral(Model.Icon.LoadIconSvgPath("arrow-left-bold-box-outline"));}</svg>
        <svg class="arrowkey" onmousedown="event.preventDefault();" onclick="simulateArrowKey(39);" viewBox='0 0 24 24'>@{WriteLiteral(Model.Icon.LoadIconSvgPath("arrow-right-bold-box-outline"));}</svg>
    </div>
    }
</body>
</html>
