#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SilentNotes.Views
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

#line 1 "NoteRazorView.cshtml"
using SilentNotes.ViewModels;

#line default
#line hidden


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "4.12.3.80")]
public partial class NoteRazorView : NoteRazorViewBase
{

#line hidden

#line 2 "NoteRazorView.cshtml"
public NoteViewModel Model { get; set; }

#line default
#line hidden


public override void Execute()
{
WriteLiteral("<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta");

WriteLiteral(" http-equiv=\"X-UA-Compatible\"");

WriteLiteral(" content=\"IE=edge\"");

WriteLiteral(" />\r\n    <base");

WriteAttribute ("href", " href=\"", "\""

#line 7 "NoteRazorView.cshtml"
, Tuple.Create<string,object,bool> ("", Model.HtmlBase

#line default
#line hidden
, false)
);
WriteLiteral(">\r\n    <title>SilentNotes</title>\r\n    <meta");

WriteLiteral(" charset=\"UTF-8\"");

WriteLiteral(" />\r\n    <meta");

WriteLiteral(" name=\"viewport\"");

WriteLiteral(" content=\"width=device-width, initial-scale=1, shrink-to-fit=no, user-scalable=no" +
"\"");

WriteLiteral(">\r\n\r\n    <link");

WriteLiteral(" href=\"bootstrap.min.css\"");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" />\r\n    <link");

WriteLiteral(" href=\"silentnotes.css\"");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" />\r\n    <link");

WriteLiteral(" href=\"quill/quill.snow.css\"");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(">\r\n    <link");

WriteLiteral(" href=\"NoteView.css\"");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(">\r\n\r\n    <script");

WriteLiteral(" src=\"jquery-3.3.1.min.js\"");

WriteLiteral("></script>\r\n    <script");

WriteLiteral(" src=\"bootstrap.bundle.min.js\"");

WriteLiteral("></script>\r\n    <script");

WriteLiteral(" src=\"silentnotes.js\"");

WriteLiteral("></script>\r\n    <script");

WriteLiteral(" src=\"quill/quill.min.js\"");

WriteLiteral("></script>\r\n\r\n    <style");

WriteLiteral(" type=\"text/css\"");

WriteLiteral(">\r\n    </style>\r\n    <script>\r\n        var quill;\r\n\r\n        function toggleForma" +
"t(formatName) {\r\n            var selectionFormat = quill.getFormat();\r\n         " +
"   var selectionFormatValue = selectionFormat[formatName];\r\n            selectio" +
"nFormatValue = !selectionFormatValue;\r\n            quill.format(formatName, sele" +
"ctionFormatValue, \'user\');\r\n        }\r\n\r\n        function toggleBlockFormat(form" +
"atName, blockType) {\r\n            var selectionFormat = quill.getFormat();\r\n    " +
"        var selectionFormatValue = selectionFormat[formatName];\r\n            var" +
" newSelectionFormat; // undefined removes the block format\r\n            if (sele" +
"ctionFormatValue !== blockType)\r\n                newSelectionFormat = blockType;" +
"\r\n            quill.format(formatName, newSelectionFormat, \'user\');\r\n        }\r\n" +
"\r\n        function simulateArrowKey(key) {\r\n            quill.focus();\r\n        " +
"    var range = quill.getSelection();\r\n            if (range) {\r\n               " +
" switch (key) {\r\n                    case 37: // left\r\n                        i" +
"f (range.length <= 0)\r\n                            quill.setSelection(range.inde" +
"x - 1, 0);\r\n                        else\r\n                            quill.setS" +
"election(range.index, range.length - 1);\r\n                        break;\r\n      " +
"              case 39: // right\r\n                        if (range.length <= 0)\r" +
"\n                            quill.setSelection(range.index + 1, 0);\r\n          " +
"              else\r\n                            quill.setSelection(range.index, " +
"range.length + 1);\r\n                        break;\r\n                }\r\n         " +
"   }\r\n        }\r\n\r\n        function getNoteHtmlContent() {\r\n            return q" +
"uill.root.innerHTML;\r\n        }\r\n\r\n        $(function () {\r\n            quill = " +
"new Quill(\'#myeditor\', {\r\n                formats: [\'header\', \'bold\', \'italic\', " +
"\'underline\', \'strike\', \'list\', \'code\', \'code-block\', \'blockquote\'],\r\n           " +
"     modules: {\r\n                    toolbar: \'#quill-toolbar\',\r\n               " +
" },\r\n                theme: \'snow\',\r\n            });\r\n\r\n            quill.on(\'te" +
"xt-change\', function (delta, oldDelta, source) {\r\n                if (source ===" +
" \'user\') {\r\n                    var params = [];\r\n                    params[\'ev" +
"ent-type\'] = \'text-change\';\r\n                    params[\'data-binding\'] = \'quill" +
"\';\r\n\r\n                    var parts = [];\r\n                    for (var key in p" +
"arams) {\r\n                        var value = params[key];\r\n                    " +
"    if (value)\r\n                            parts.push(key + \'=\' + encodeURIComp" +
"onent(value));\r\n                    }\r\n\r\n                    var url = \'HtmlView" +
"Binding?\' + parts.join(\'&\');\r\n                    location.href = url;\r\n        " +
"        }\r\n            });\r\n\r\n            $(quill.root).one(\"focusin\", function " +
"() {\r\n                $(\'#arrowkeys\').css(\"display\", \"inline-flex\");\r\n          " +
"  });\r\n        });\r\n    </script>\r\n</head>\r\n<body>\r\n    <nav");

WriteLiteral(" id=\"navigation\"");

WriteLiteral(" class=\"d-flex\"");

WriteLiteral(">\r\n        <button");

WriteLiteral(" class=\"nav-item mr-auto\"");

WriteLiteral(" onclick=\"bind(event);\"");

WriteLiteral(" data-binding=\"GoBack\"");

WriteAttribute ("title", " title=\"", "\""

#line 103 "NoteRazorView.cshtml"
                                                      , Tuple.Create<string,object,bool> ("", Model.Language["back"]

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 103 "NoteRazorView.cshtml"
                                                                                                                        WriteLiteral(Model.Icon["arrow-left"]);

#line default
#line hidden
WriteLiteral("</button>\r\n\r\n        <span");

WriteLiteral(" id=\"quill-toolbar\"");

WriteLiteral(" class=\"d-inline-flex\"");

WriteLiteral(">\r\n            <select");

WriteLiteral(" class=\"nav-item ql-header\"");

WriteLiteral(">\r\n                <option");

WriteLiteral(" value=\"1\"");

WriteLiteral("></option>\r\n                <option");

WriteLiteral(" value=\"2\"");

WriteLiteral("></option>\r\n                <option");

WriteLiteral(" value=\"3\"");

WriteLiteral("></option>\r\n                <option");

WriteLiteral(" selected=\"selected\"");

WriteLiteral("></option>\r\n            </select>\r\n\r\n            <button");

WriteLiteral(" class=\"nav-item ql-bold\"");

WriteAttribute ("title", " title=\"", "\""

#line 113 "NoteRazorView.cshtml"
             , Tuple.Create<string,object,bool> ("", Model.Language["note_bold"]

#line default
#line hidden
, false)
);
WriteLiteral("></button>\r\n            <button");

WriteLiteral(" class=\"nav-item ql-italic\"");

WriteAttribute ("title", " title=\"", "\""

#line 114 "NoteRazorView.cshtml"
               , Tuple.Create<string,object,bool> ("", Model.Language["note_italic"]

#line default
#line hidden
, false)
);
WriteLiteral("></button>\r\n            <span");

WriteLiteral(" class=\"show-only-on-wide-browser\"");

WriteLiteral(">\r\n                <button");

WriteLiteral(" class=\"nav-item ql-underline\"");

WriteAttribute ("title", " title=\"", "\""

#line 116 "NoteRazorView.cshtml"
                      , Tuple.Create<string,object,bool> ("", Model.Language["note_underline"]

#line default
#line hidden
, false)
);
WriteLiteral("></button>\r\n                <button");

WriteLiteral(" class=\"nav-item ql-strike\"");

WriteAttribute ("title", " title=\"", "\""

#line 117 "NoteRazorView.cshtml"
                   , Tuple.Create<string,object,bool> ("", Model.Language["note_strike"]

#line default
#line hidden
, false)
);
WriteLiteral("></button>\r\n                <button");

WriteLiteral(" class=\"nav-item ql-list\"");

WriteLiteral(" value=\"ordered\"");

WriteAttribute ("title", " title=\"", "\""

#line 118 "NoteRazorView.cshtml"
                                 , Tuple.Create<string,object,bool> ("", Model.Language["note_list_ordered"]

#line default
#line hidden
, false)
);
WriteLiteral("></button>\r\n                <button");

WriteLiteral(" class=\"nav-item ql-list\"");

WriteLiteral(" value=\"bullet\"");

WriteAttribute ("title", " title=\"", "\""

#line 119 "NoteRazorView.cshtml"
                                , Tuple.Create<string,object,bool> ("", Model.Language["note_list_unordered"]

#line default
#line hidden
, false)
);
WriteLiteral("></button>\r\n            </span>\r\n        </span>\r\n\r\n        <!-- Color dropdown -" +
"->\r\n        <div");

WriteLiteral(" class=\"dropdown\"");

WriteLiteral(">\r\n            <button");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(" id=\"colorDropdownMenu\"");

WriteLiteral(" data-toggle=\"dropdown\"");

WriteLiteral(" aria-haspopup=\"true\"");

WriteLiteral(" aria-expanded=\"false\"");

WriteAttribute ("title", " title=\"", "\""

#line 125 "NoteRazorView.cshtml"
                                                                                              , Tuple.Create<string,object,bool> ("", Model.Language["note_colors"]

#line default
#line hidden
, false)
);
WriteLiteral(">\r\n");


#line 126 "NoteRazorView.cshtml"
                

#line default
#line hidden

#line 126 "NoteRazorView.cshtml"
                  WriteLiteral(Model.Icon["palette"]);

#line default
#line hidden
WriteLiteral("\r\n            </button>\r\n            <div");

WriteLiteral(" class=\"dropdown-menu dropdown-menu-right\"");

WriteLiteral(" aria-labelledby=\"colorDropdownMenu\"");

WriteLiteral(">\r\n");


#line 129 "NoteRazorView.cshtml"
                

#line default
#line hidden

#line 129 "NoteRazorView.cshtml"
                 foreach (var color in @Model.BackgroundColorsHex)
                {


#line default
#line hidden
WriteLiteral("                    <div");

WriteLiteral(" class=\"dropdown-item color-btn\"");

WriteLiteral(" onclick=\"bind(event);\"");

WriteLiteral(" data-binding=\"backgroundcolorhex\"");

WriteLiteral(" data-backgroundcolorhex=\"");


#line 131 "NoteRazorView.cshtml"
                                                                                                                                      Write(color);


#line default
#line hidden
WriteLiteral("\"");

WriteAttribute ("style", " style=\"", "\""
, Tuple.Create<string,object,bool> ("", "background-color:", true)

#line 131 "NoteRazorView.cshtml"
                                                                                                                                    , Tuple.Create<string,object,bool> (" ", color

#line default
#line hidden
, false)
);
WriteLiteral(">&nbsp;</div>\r\n");


#line 132 "NoteRazorView.cshtml"
                }


#line default
#line hidden
WriteLiteral("            </div>\r\n        </div>\r\n\r\n        <!-- Dropdown Menu -->\r\n        <di" +
"v");

WriteLiteral(" class=\"dropdown\"");

WriteLiteral(">\r\n            <button");

WriteLiteral(" class=\"nav-item\"");

WriteLiteral(" id=\"navOverflowMenu\"");

WriteLiteral(" data-toggle=\"dropdown\"");

WriteLiteral(" aria-haspopup=\"true\"");

WriteLiteral(" aria-expanded=\"false\"");

WriteLiteral(">\r\n");


#line 139 "NoteRazorView.cshtml"
                

#line default
#line hidden

#line 139 "NoteRazorView.cshtml"
                  WriteLiteral(Model.Icon["dots-vertical"]);

#line default
#line hidden
WriteLiteral("\r\n            </button>\r\n            <div");

WriteLiteral(" class=\"dropdown-menu dropdown-menu-right\"");

WriteLiteral(" aria-labelledby=\"navOverflowMenu\"");

WriteLiteral(">\r\n                <div");

WriteLiteral(" class=\"dropdown-item show-only-on-narrow-browser\"");

WriteLiteral(" onclick=\"toggleFormat(\'underline\');\"");

WriteLiteral(">");


#line 142 "NoteRazorView.cshtml"
                                                                                                              WriteLiteral(Model.Icon["format-underline"]);

#line default
#line hidden
WriteLiteral(" ");


#line 142 "NoteRazorView.cshtml"
                                                                                                                                                        Write(Model.Language["note_underline"]);


#line default
#line hidden
WriteLiteral("</div>\r\n                <div");

WriteLiteral(" class=\"dropdown-item show-only-on-narrow-browser\"");

WriteLiteral(" onclick=\"toggleFormat(\'strike\');\"");

WriteLiteral(">");


#line 143 "NoteRazorView.cshtml"
                                                                                                           WriteLiteral(Model.Icon["format-strikethrough-variant"]);

#line default
#line hidden
WriteLiteral(" ");


#line 143 "NoteRazorView.cshtml"
                                                                                                                                                                 Write(Model.Language["note_strike"]);


#line default
#line hidden
WriteLiteral("</div>\r\n                <div");

WriteLiteral(" class=\"dropdown-item show-only-on-narrow-browser\"");

WriteLiteral(" onclick=\"toggleBlockFormat(\'list\', \'ordered\');\"");

WriteLiteral(">");


#line 144 "NoteRazorView.cshtml"
                                                                                                                         WriteLiteral(Model.Icon["format-list-numbers"]);

#line default
#line hidden
WriteLiteral(" ");


#line 144 "NoteRazorView.cshtml"
                                                                                                                                                                      Write(Model.Language["note_list_ordered"]);


#line default
#line hidden
WriteLiteral("</div>\r\n                <div");

WriteLiteral(" class=\"dropdown-item show-only-on-narrow-browser\"");

WriteLiteral(" onclick=\"toggleBlockFormat(\'list\', \'bullet\');\"");

WriteLiteral(">");


#line 145 "NoteRazorView.cshtml"
                                                                                                                        WriteLiteral(Model.Icon["format-list-bulleted"]);

#line default
#line hidden
WriteLiteral(" ");


#line 145 "NoteRazorView.cshtml"
                                                                                                                                                                      Write(Model.Language["note_list_unordered"]);


#line default
#line hidden
WriteLiteral("</div>\r\n                <div");

WriteLiteral(" class=\"dropdown-item\"");

WriteLiteral(" onclick=\"toggleFormat(\'code-block\');\"");

WriteLiteral(">");


#line 146 "NoteRazorView.cshtml"
                                                                                   WriteLiteral(Model.Icon["code-braces"]);

#line default
#line hidden
WriteLiteral(" ");


#line 146 "NoteRazorView.cshtml"
                                                                                                                        Write(Model.Language["note_code"]);


#line default
#line hidden
WriteLiteral("</div>\r\n                <div");

WriteLiteral(" class=\"dropdown-item\"");

WriteLiteral(" onclick=\"toggleFormat(\'blockquote\');\"");

WriteLiteral(">");


#line 147 "NoteRazorView.cshtml"
                                                                                   WriteLiteral(Model.Icon["format-quote-close"]);

#line default
#line hidden
WriteLiteral(" ");


#line 147 "NoteRazorView.cshtml"
                                                                                                                               Write(Model.Language["note_quotation"]);


#line default
#line hidden
WriteLiteral("</div>\r\n            </div>\r\n        </div>\r\n    </nav>\r\n\r\n    <div");

WriteLiteral(" id=\"content\"");

WriteLiteral(" class=\"\"");

WriteLiteral(" data-binding=\"Content\"");

WriteAttribute ("style", " style=\"", "\""
, Tuple.Create<string,object,bool> ("", "background-color:", true)

#line 152 "NoteRazorView.cshtml"
                                       , Tuple.Create<string,object,bool> (" ", Model.BackgroundColorHex

#line default
#line hidden
, false)
);
WriteLiteral(">\r\n        <div");

WriteLiteral(" id=\"myeditor\"");

WriteLiteral(" class=\"note-viewer\"");

WriteLiteral(" data-binding=\"quill\"");

WriteLiteral(">");


#line 153 "NoteRazorView.cshtml"
                                                                      WriteLiteral(Model.HtmlContent);

#line default
#line hidden
WriteLiteral("</div>\r\n    </div>\r\n\r\n");


#line 156 "NoteRazorView.cshtml"
    

#line default
#line hidden

#line 156 "NoteRazorView.cshtml"
     if (Model.ShowCursorArrowKeys)
    {


#line default
#line hidden
WriteLiteral("    <div");

WriteLiteral(" id=\"arrowkeys\"");

WriteAttribute ("title", " title=\"", "\""

#line 158 "NoteRazorView.cshtml"
, Tuple.Create<string,object,bool> ("", Model.Language["gui_arrow_key"]

#line default
#line hidden
, false)
);
WriteLiteral(">\r\n        <svg");

WriteLiteral(" class=\"arrowkey\"");

WriteLiteral(" onmousedown=\"event.preventDefault();\"");

WriteLiteral(" onclick=\"simulateArrowKey(37);\"");

WriteLiteral(" viewBox=\'0 0 24 24\'");

WriteLiteral(">");


#line 159 "NoteRazorView.cshtml"
                                                                                                                          WriteLiteral(Model.Icon.LoadIconSvgPath("arrow-left-bold-box-outline"));

#line default
#line hidden
WriteLiteral("</svg>\r\n        <svg");

WriteLiteral(" class=\"arrowkey\"");

WriteLiteral(" onmousedown=\"event.preventDefault();\"");

WriteLiteral(" onclick=\"simulateArrowKey(39);\"");

WriteLiteral(" viewBox=\'0 0 24 24\'");

WriteLiteral(">");


#line 160 "NoteRazorView.cshtml"
                                                                                                                          WriteLiteral(Model.Icon.LoadIconSvgPath("arrow-right-bold-box-outline"));

#line default
#line hidden
WriteLiteral("</svg>\r\n    </div>\r\n");


#line 162 "NoteRazorView.cshtml"
    }


#line default
#line hidden
WriteLiteral("</body>\r\n</html>\r\n");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class NoteRazorViewBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
